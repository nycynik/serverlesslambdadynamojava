package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import org.apache.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "PLACEHOLDER_ALERTS_TABLE_NAME")
public class Alert {

    private static final String ALERTS_TABLE_NAME = System.getenv("ALERTS_TABLE_NAME");

    private final DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private final Logger logger = Logger.getLogger(this.getClass());

    // Actual properties
    private String id;
    private String recipientId;
    private String shortDescription;
    private String longDescription;
    private String link;
    private String created;
    private String expire;
    private String state; // enum?

    // Getters & Setters
    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }


    public String getRecipientId() {
        return recipientId;
    }

    public void setRecipientId(String recipientId) {
        this.recipientId = recipientId;
    }

    public String getShortDescription() {
        return shortDescription;
    }

    public void setShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
    }

    public String getLongDescription() {
        return longDescription;
    }

    public void setLongDescription(String longDescription) {
        this.longDescription = longDescription;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    public String getCreated() {
        return created;
    }

    public void setCreated(String created) {
        this.created = created;
    }

    public String getExpire() {
        return expire;
    }

    public void setExpire(String expire) {
        this.expire = expire;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Alert() {

        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(ALERTS_TABLE_NAME))
                .build();

        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Alert [id=%s, short=%s]", this.id, this.shortDescription);
    }

    public Boolean ifTableExists() {
        return this.client.describeTable(ALERTS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    // TODO: Add check that I own the alerts I'm getting.
    // TODO: By default, return only active alerts, add param to get all, or don't even allow it.
    // TODO: Maybe delete the alerts as they expire here when they are fetched.
    public List<Alert> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Alert> results = this.mapper.scan(Alert.class, scanExp);
        for (Alert a : results) {
            logger.info("Alert = list(): " + a.toString());
        }

        return results;
    }

    // probably not a use case, why get just 1 isntead of get all alerts.
    // Will remove rather than fix.
    // TODO: Add check that I own the alert I'm getting.
    public Alert get(String id) throws IOException {
        Alert alert = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id) );

        DynamoDBQueryExpression<Alert> queryExp = new DynamoDBQueryExpression<Alert>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Alert> result = this.mapper.query(Alert.class, queryExp);
        if (result.size() > 0) {
            alert = result.get(0);
            logger.info("Alert - get(): alert - " + alert.toString());
        } else {
            logger.info("Alert - get(): alert - Not found for key " + id);
        }

        return alert;
    }

    // Create a new alert
    // TODO: Validation that alert is reasonable.
    public void save(Alert alert) throws IOException {

        // TODO: Verify this user can create alerts

        // TODO: Verify the expiry date is not in the past, if so error

        // TODO: Verify the short and long description are completed, general validation.

        logger.info("Alert - save(): " + alert.toString());
        this.mapper.save(alert);
    }

    public Boolean delete(String id) throws IOException {
        Alert alert = null;

        // TODO: Verify this user can delete alerts

        // TODO: verify this user can delete *this* alert.

        // get product if exists
        alert = get(id);
        if (alert != null) {
            logger.info("Alert - delete(): " + alert.toString());
            this.mapper.delete(alert);
        } else {
            logger.info("Alert - delete(): alert - does not exist to delete.");
            return false;
        }
        return true;
    }

}

